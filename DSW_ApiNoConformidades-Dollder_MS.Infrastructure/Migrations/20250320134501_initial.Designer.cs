// <auto-generated />
using System;
using System.Collections.Generic;
using DSW_ApiNoConformidades_Dollder_MS.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DSW_ApiNoConformidades_Dollder_MS.Infrastructure.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20250320134501_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.AccionesEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("area")
                        .HasColumnType("text");

                    b.Property<string>("cargo_usuario")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("fecha_compromiso")
                        .HasColumnType("text");

                    b.Property<string>("investigacion")
                        .HasColumnType("text");

                    b.Property<Guid>("responsable_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("visto_bueno")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("responsable_Id");

                    b.ToTable("Acciones");

                    b.HasDiscriminator().HasValue("AccionesEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.CalendarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<int?>("anio")
                        .HasColumnType("integer");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("dia")
                        .HasColumnType("integer");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<int?>("mes")
                        .HasColumnType("integer");

                    b.Property<string>("titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Indicadores.IndicadorCausaEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("causa")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("IndicadorCausa");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Indicadores.IndicadorOrigenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("origen")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("IndicadorOrigen");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.CierreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("conforme")
                        .HasColumnType("boolean");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("fecha_verificacion")
                        .HasColumnType("text");

                    b.Property<Guid>("noConformidad_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("responsable")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("noConformidad_Id");

                    b.ToTable("Cierre");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.DepartamentoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("cargo")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Departamento");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ImagenReporteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<byte[]>("imagen")
                        .HasColumnType("bytea");

                    b.Property<string>("nombre_archivo")
                        .HasColumnType("text");

                    b.Property<Guid>("reporte_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("reporte_Id");

                    b.ToTable("ImagenReporte");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.IndicadoresEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("cierre_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<Guid>("origen_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("cierre_Id");

                    b.HasIndex("origen_Id");

                    b.ToTable("Indicadores");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NoConformidadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("areas_involucradas")
                        .HasColumnType("text[]");

                    b.Property<string>("consecuencias")
                        .HasColumnType("text");

                    b.Property<int>("estado")
                        .HasColumnType("integer");

                    b.Property<string>("numero_expedicion")
                        .HasColumnType("text");

                    b.Property<int?>("prioridad")
                        .HasColumnType("integer");

                    b.Property<Guid>("reporte_Id")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("responsables_cargo")
                        .HasColumnType("text[]");

                    b.Property<string>("revisado_por")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("reporte_Id");

                    b.ToTable("NoConformidad");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NotificacionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("dirigido")
                        .HasColumnType("text");

                    b.Property<string>("envia")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("mensaje")
                        .HasColumnType("text");

                    b.Property<bool?>("revisado")
                        .HasColumnType("boolean");

                    b.Property<string>("tipo")
                        .HasColumnType("text");

                    b.Property<string>("titulo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notificacion");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Relaciones.R_Acciones_UsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("acciones_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<Guid>("usuario_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("acciones_Id");

                    b.HasIndex("usuario_Id");

                    b.ToTable("R_Acciones_Usuario");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Relaciones.R_Calidad_NoConformidadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("calidad_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<Guid>("noConformidad_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("calidad_Id");

                    b.HasIndex("noConformidad_Id");

                    b.ToTable("R_Calidad_NoConformidad");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Relaciones.R_Indicadores_CausasEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("causa_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<Guid>("indicador_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("causa_Id");

                    b.HasIndex("indicador_Id");

                    b.ToTable("R_Indicadores_Causas");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ReporteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("area")
                        .HasColumnType("text");

                    b.Property<string>("departamento_emisor")
                        .HasColumnType("text");

                    b.Property<string>("descripcion")
                        .HasColumnType("text");

                    b.Property<string>("detectado_por")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("titulo")
                        .HasColumnType("text");

                    b.Property<Guid>("usuario_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("usuario_Id");

                    b.ToTable("Reporte");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ResponsableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("analisis_causa")
                        .HasColumnType("text[]");

                    b.Property<string>("analisis_riesgo")
                        .HasColumnType("text");

                    b.Property<string>("cargo_responsable")
                        .HasColumnType("text");

                    b.Property<string>("correccion")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("fecha_compromiso")
                        .HasColumnType("text");

                    b.Property<string>("investigacion")
                        .HasColumnType("text");

                    b.Property<Guid>("noConformidad_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("usuario_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("noConformidad_Id");

                    b.HasIndex("usuario_Id");

                    b.ToTable("Responsable");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.RevisionReporteEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.Property<Guid>("reporte_Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("usuario_Id")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("reporte_Id");

                    b.HasIndex("usuario_Id");

                    b.ToTable("RevisionReporte");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.SeguimientoEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("estatus")
                        .HasColumnType("text");

                    b.Property<string>("fecha_seguimiento")
                        .HasColumnType("text");

                    b.Property<Guid>("noConformidad_Id")
                        .HasColumnType("uuid");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("realizado_por")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("noConformidad_Id");

                    b.ToTable("Seguimiento");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<string>("apellido")
                        .HasColumnType("text");

                    b.Property<string>("correo")
                        .HasColumnType("text");

                    b.Property<Guid>("departamento_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("nombre")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<string>("preguntas_de_seguridad")
                        .HasColumnType("text");

                    b.Property<string>("preguntas_de_seguridad2")
                        .HasColumnType("text");

                    b.Property<string>("respuesta_de_seguridad")
                        .HasColumnType("text");

                    b.Property<string>("respuesta_de_seguridad2")
                        .HasColumnType("text");

                    b.Property<string>("usuario")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("departamento_Id");

                    b.ToTable("Usuario");

                    b.HasDiscriminator().HasValue("UsuarioEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.VerificacionEfectividadEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.Property<Guid>("cierre_Id")
                        .HasColumnType("uuid");

                    b.Property<bool?>("efectiva")
                        .HasColumnType("boolean");

                    b.Property<bool?>("estado")
                        .HasColumnType("boolean");

                    b.Property<string>("observaciones")
                        .HasColumnType("text");

                    b.Property<string>("realizado_por")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("cierre_Id");

                    b.ToTable("VerificacionEfectividad");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Acciones.CorrectivasEntity", b =>
                {
                    b.HasBaseType("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.AccionesEntity");

                    b.HasDiscriminator().HasValue("CorrectivasEntity");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Acciones.PreventivasEntity", b =>
                {
                    b.HasBaseType("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.AccionesEntity");

                    b.Property<Guid>("correctiva_Id")
                        .HasColumnType("uuid");

                    b.HasIndex("correctiva_Id");

                    b.HasDiscriminator().HasValue("PreventivasEntity");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Usuario.AdministradorEntity", b =>
                {
                    b.HasBaseType("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity");

                    b.HasDiscriminator().HasValue("AdministradorEntity");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Usuario.CalidadEntity", b =>
                {
                    b.HasBaseType("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity");

                    b.HasDiscriminator().HasValue("CalidadEntity");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Usuario.OperarioEntity", b =>
                {
                    b.HasBaseType("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity");

                    b.HasDiscriminator().HasValue("OperarioEntity");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.AccionesEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ResponsableEntity", "responsable")
                        .WithMany()
                        .HasForeignKey("responsable_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("responsable");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.CierreEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NoConformidadEntity", "noConformidad")
                        .WithMany()
                        .HasForeignKey("noConformidad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("noConformidad");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ImagenReporteEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ReporteEntity", "reporte")
                        .WithMany()
                        .HasForeignKey("reporte_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reporte");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.IndicadoresEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.CierreEntity", "cierre")
                        .WithMany()
                        .HasForeignKey("cierre_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Indicadores.IndicadorOrigenEntity", "origen")
                        .WithMany()
                        .HasForeignKey("origen_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cierre");

                    b.Navigation("origen");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NoConformidadEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ReporteEntity", "reporte")
                        .WithMany()
                        .HasForeignKey("reporte_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reporte");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Relaciones.R_Acciones_UsuarioEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.AccionesEntity", "acciones")
                        .WithMany()
                        .HasForeignKey("acciones_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity", "usuario")
                        .WithMany()
                        .HasForeignKey("usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("acciones");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Relaciones.R_Calidad_NoConformidadEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Usuario.CalidadEntity", "calidad")
                        .WithMany()
                        .HasForeignKey("calidad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NoConformidadEntity", "noConformidad")
                        .WithMany()
                        .HasForeignKey("noConformidad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("calidad");

                    b.Navigation("noConformidad");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Relaciones.R_Indicadores_CausasEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Indicadores.IndicadorCausaEntity", "causa")
                        .WithMany()
                        .HasForeignKey("causa_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.IndicadoresEntity", "indicador")
                        .WithMany()
                        .HasForeignKey("indicador_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("causa");

                    b.Navigation("indicador");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ReporteEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity", "usuario")
                        .WithMany()
                        .HasForeignKey("usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ResponsableEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NoConformidadEntity", "noConformidad")
                        .WithMany()
                        .HasForeignKey("noConformidad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity", "usuario")
                        .WithMany()
                        .HasForeignKey("usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("noConformidad");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.RevisionReporteEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.ReporteEntity", "reporte")
                        .WithMany()
                        .HasForeignKey("reporte_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity", "usuario")
                        .WithMany()
                        .HasForeignKey("usuario_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reporte");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.SeguimientoEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.NoConformidadEntity", "noConformidad")
                        .WithMany()
                        .HasForeignKey("noConformidad_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("noConformidad");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.UsuarioEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.DepartamentoEntity", "departamento")
                        .WithMany()
                        .HasForeignKey("departamento_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("departamento");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.VerificacionEfectividadEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.CierreEntity", "cierre")
                        .WithMany()
                        .HasForeignKey("cierre_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cierre");
                });

            modelBuilder.Entity("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Acciones.PreventivasEntity", b =>
                {
                    b.HasOne("DSW_ApiNoConformidades_Dollder_MS.Core.Entities.Child.Acciones.CorrectivasEntity", "correctiva")
                        .WithMany()
                        .HasForeignKey("correctiva_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("correctiva");
                });
#pragma warning restore 612, 618
        }
    }
}
